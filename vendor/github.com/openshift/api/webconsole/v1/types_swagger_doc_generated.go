package v1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-generated-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE
var map_AssetExtensionsConfig = map[string]string{
	"":                "AssetExtensionsConfig holds the necessary configuration options for asset extensions",
	"name":            "SubContext is the path under /<context>/extensions/ to serve files from SourceDirectory",
	"sourceDirectory": "SourceDirectory is a directory on the asset server to serve files under Name in the Web Console. It may have nested folders.",
	"html5Mode":       "HTML5Mode determines whether to redirect to the root index.html when a file is not found. This is needed for apps that use the HTML5 history API like AngularJS apps with HTML5 mode enabled. If HTML5Mode is true, also rewrite the base element in index.html with the Web Console's context root. Defaults to false.",
}

func (AssetExtensionsConfig) SwaggerDoc() map[string]string {
	return map_AssetExtensionsConfig
}

var map_CertInfo = map[string]string{
	"":         "CertInfo relates a certificate with a private key",
	"certFile": "CertFile is a file containing a PEM-encoded certificate",
	"keyFile":  "KeyFile is a file containing a PEM-encoded private key for the certificate specified by CertFile",
}

func (CertInfo) SwaggerDoc() map[string]string {
	return map_CertInfo
}

var map_HTTPServingInfo = map[string]string{
	"": "HTTPServingInfo holds configuration for serving HTTP",
	"maxRequestsInFlight":   "MaxRequestsInFlight is the number of concurrent requests allowed to the server. If zero, no limit.",
	"requestTimeoutSeconds": "RequestTimeoutSeconds is the number of seconds before requests are timed out. The default is 60 minutes, if -1 there is no limit on requests.",
}

func (HTTPServingInfo) SwaggerDoc() map[string]string {
	return map_HTTPServingInfo
}

var map_NamedCertificate = map[string]string{
	"":      "NamedCertificate specifies a certificate/key, and the names it should be served for",
	"names": "Names is a list of DNS names this certificate should be used to secure A name can be a normal DNS name, or can contain leading wildcard segments.",
}

func (NamedCertificate) SwaggerDoc() map[string]string {
	return map_NamedCertificate
}

var map_ServingInfo = map[string]string{
	"":                  "ServingInfo holds information about serving web pages",
	"bindAddress":       "BindAddress is the ip:port to serve on",
	"bindNetwork":       "BindNetwork is the type of network to bind to - defaults to \"tcp4\", accepts \"tcp\", \"tcp4\", and \"tcp6\"",
	"clientCA":          "ClientCA is the certificate bundle for all the signers that you'll recognize for incoming client certificates",
	"namedCertificates": "NamedCertificates is a list of certificates to use to secure requests to specific hostnames",
	"minTLSVersion":     "MinTLSVersion is the minimum TLS version supported. Values must match version names from https://golang.org/pkg/crypto/tls/#pkg-constants",
	"cipherSuites":      "CipherSuites contains an overridden list of ciphers for the server to support. Values must match cipher suite IDs from https://golang.org/pkg/crypto/tls/#pkg-constants",
}

func (ServingInfo) SwaggerDoc() map[string]string {
	return map_ServingInfo
}

var map_WebConsoleConfiguration = map[string]string{
	"":                     "WebConsoleConfiguration holds the necessary configuration options for serving the web console",
	"servingInfo":          "ServingInfo is the HTTP serving information for these assets",
	"publicURL":            "PublicURL is where you can find the asset server (TODO do we really need this?)",
	"logoutURL":            "LogoutURL is an optional, absolute URL to redirect web browsers to after logging out of the web console. If not specified, the built-in logout page is shown.",
	"masterPublicURL":      "MasterPublicURL is how the web console can access the OpenShift v1 server",
	"loggingPublicURL":     "LoggingPublicURL is the public endpoint for logging (optional)",
	"metricsPublicURL":     "MetricsPublicURL is the public endpoint for metrics (optional)",
	"extensionScripts":     "ExtensionScripts are file paths on the asset server files to load as scripts when the Web Console loads",
	"extensionProperties":  "ExtensionProperties are key(string) and value(string) pairs that will be injected into the console under the global variable OPENSHIFT_EXTENSION_PROPERTIES",
	"extensionStylesheets": "ExtensionStylesheets are file paths on the asset server files to load as stylesheets when the Web Console loads",
	"extensions":           "Extensions are files to serve from the asset server filesystem under a subcontext",
	"extensionDevelopment": "ExtensionDevelopment when true tells the asset server to reload extension scripts and stylesheets for every request rather than only at startup. It lets you develop extensions without having to restart the server for every change.",
}

func (WebConsoleConfiguration) SwaggerDoc() map[string]string {
	return map_WebConsoleConfiguration
}

// AUTO-GENERATED FUNCTIONS END HERE
